/**
 * Script de teste exaustivo para Evolution API
 * 
 * Testa:
 * 1. Salvamento de credenciais
 * 2. Teste de conex√£o
 * 3. Listagem de status
 * 4. Cria√ß√£o de inst√¢ncia
 * 5. Obten√ß√£o de QR Code
 */

const BASE_URL = 'http://localhost:5000';

// Credenciais de teste (substitua pelos valores reais)
const EVOLUTION_CREDENTIALS = {
  api_url: 'http://103.199.187.146:8080',
  api_key: 'sua-api-key-aqui', // ‚ö†Ô∏è COLOQUE SUA API KEY AQUI
  instance: 'nexus-whatsapp'
};

async function testEvolutionAPI() {
  console.log('üß™ Iniciando testes do Evolution API...\n');

  // Test 1: Salvar credenciais
  console.log('üìù Test 1: Salvando credenciais...');
  try {
    const saveResponse = await fetch(`${BASE_URL}/api/credentials/evolution_api`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(EVOLUTION_CREDENTIALS)
    });

    const saveData = await saveResponse.json();
    
    if (saveData.success) {
      console.log('‚úÖ Credenciais salvas com sucesso!\n');
    } else {
      console.log('‚ùå Erro ao salvar credenciais:', saveData.error, '\n');
      return;
    }
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o de salvamento:', error.message, '\n');
    return;
  }

  // Aguardar um pouco para garantir que foi salvo
  await new Promise(resolve => setTimeout(resolve, 500));

  // Test 2: Verificar status das credenciais
  console.log('üìã Test 2: Verificando status das credenciais...');
  try {
    const statusResponse = await fetch(`${BASE_URL}/api/credentials`);
    const statusData = await statusResponse.json();
    
    console.log('Status das credenciais:', statusData);
    
    if (statusData.success && statusData.credentials.evolution_api) {
      console.log('‚úÖ Evolution API configurado!\n');
    } else {
      console.log('‚ùå Evolution API n√£o aparece como configurado\n');
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar status:', error.message, '\n');
  }

  // Test 3: Testar conex√£o
  console.log('üîå Test 3: Testando conex√£o com Evolution API...');
  try {
    const testResponse = await fetch(`${BASE_URL}/api/credentials/test/evolution_api`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const testData = await testResponse.json();
    
    if (testData.success) {
      console.log('‚úÖ Teste de conex√£o bem-sucedido!');
      console.log('   Mensagem:', testData.message);
      console.log('   Dados:', testData.data, '\n');
    } else {
      console.log('‚ùå Teste de conex√£o falhou:', testData.error, '\n');
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar conex√£o:', error.message, '\n');
  }

  // Test 4: Obter status da inst√¢ncia
  console.log('üìä Test 4: Obtendo status da inst√¢ncia...');
  try {
    const instanceResponse = await fetch(`${BASE_URL}/api/evolution/status`);
    const instanceData = await instanceResponse.json();
    
    if (instanceData.success) {
      console.log('‚úÖ Status da inst√¢ncia obtido!');
      console.log('   Status:', instanceData.status, '\n');
    } else {
      console.log('‚ö†Ô∏è  Status da inst√¢ncia:', instanceData.error);
      console.log('   (Isto √© normal se a inst√¢ncia ainda n√£o foi criada)\n');
    }
  } catch (error) {
    console.log('‚ùå Erro ao obter status:', error.message, '\n');
  }

  // Test 5: Criar inst√¢ncia (se necess√°rio)
  console.log('üîß Test 5: Criando inst√¢ncia...');
  try {
    const createResponse = await fetch(`${BASE_URL}/api/evolution/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    const createData = await createResponse.json();
    
    if (createData.success) {
      console.log('‚úÖ Inst√¢ncia criada com sucesso!');
      console.log('   Inst√¢ncia:', createData.instance, '\n');
    } else {
      console.log('‚ö†Ô∏è  Cria√ß√£o de inst√¢ncia:', createData.error);
      console.log('   (Isto √© normal se a inst√¢ncia j√° existe)\n');
    }
  } catch (error) {
    console.log('‚ùå Erro ao criar inst√¢ncia:', error.message, '\n');
  }

  // Test 6: Obter QR Code
  console.log('üì± Test 6: Obtendo QR Code...');
  try {
    const qrResponse = await fetch(`${BASE_URL}/api/evolution/qrcode`);
    const qrData = await qrResponse.json();
    
    if (qrData.success) {
      console.log('‚úÖ QR Code obtido com sucesso!');
      console.log('   Inst√¢ncia:', qrData.instance);
      console.log('   QR Code dispon√≠vel:', qrData.qrcode ? 'Sim' : 'N√£o', '\n');
    } else {
      console.log('‚ö†Ô∏è  QR Code:', qrData.error, '\n');
    }
  } catch (error) {
    console.log('‚ùå Erro ao obter QR Code:', error.message, '\n');
  }

  console.log('üéâ Testes conclu√≠dos!\n');
  console.log('üìå Resumo:');
  console.log('   - Todas as corre√ß√µes de URL foram aplicadas');
  console.log('   - URLs n√£o devem mais ter barras duplas (//)');
  console.log('   - Sistema de autentica√ß√£o em modo dev funcionando');
}

// Executar testes
testEvolutionAPI().catch(console.error);
